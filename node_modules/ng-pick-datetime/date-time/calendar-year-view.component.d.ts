import { AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { CalendarCell, OwlCalendarBodyComponent } from './calendar-body.component';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { OwlDateTimeFormats } from './adapter/date-time-format.class';
import { SelectMode } from './date-time.class';
import * as ɵngcc0 from '@angular/core';
export declare class OwlYearViewComponent<T> implements OnInit, AfterContentInit, OnDestroy {
    private cdRef;
    private dateTimeAdapter;
    private dateTimeFormats;
    private _selectMode;
    selectMode: SelectMode;
    private _selected;
    selected: T | null;
    private _selecteds;
    selecteds: T[];
    private _pickerMoment;
    pickerMoment: T;
    private _dateFilter;
    dateFilter: (date: T) => boolean;
    private _minDate;
    minDate: T | null;
    private _maxDate;
    maxDate: T | null;
    private readonly monthNames;
    private _months;
    readonly months: CalendarCell[][];
    readonly activeCell: number;
    readonly isInSingleMode: boolean;
    readonly isInRangeMode: boolean;
    private localeSub;
    private initiated;
    todayMonth: number | null;
    selectedMonths: number[];
    readonly change: EventEmitter<T>;
    readonly monthSelected: EventEmitter<T>;
    readonly pickerMomentChange: EventEmitter<T>;
    readonly keyboardEnter: EventEmitter<any>;
    calendarBodyElm: OwlCalendarBodyComponent;
    readonly owlDTCalendarView: boolean;
    constructor(cdRef: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    selectCalendarCell(cell: CalendarCell): void;
    private selectMonth;
    handleCalendarKeydown(event: KeyboardEvent): void;
    private generateMonthList;
    private createMonthCell;
    private isMonthEnabled;
    private getMonthInCurrentYear;
    private setSelectedMonths;
    private hasSameYear;
    private getValidDate;
    private focusActiveCell;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlYearViewComponent<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlYearViewComponent<any>, "owl-date-time-year-view", ["owlMonthView"], {
    "selectMode": "selectMode";
    "selected": "selected";
    "selecteds": "selecteds";
    "pickerMoment": "pickerMoment";
    "dateFilter": "dateFilter";
    "minDate": "minDate";
    "maxDate": "maxDate";
}, {
    "change": "change";
    "monthSelected": "monthSelected";
    "pickerMomentChange": "pickerMomentChange";
    "keyboardEnter": "keyboardEnter";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIteWVhci12aWV3LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjYWxlbmRhci15ZWFyLXZpZXcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaURBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbGVuZGFyQ2VsbCwgT3dsQ2FsZW5kYXJCb2R5Q29tcG9uZW50IH0gZnJvbSAnLi9jYWxlbmRhci1ib2R5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRlVGltZUFkYXB0ZXIgfSBmcm9tICcuL2FkYXB0ZXIvZGF0ZS10aW1lLWFkYXB0ZXIuY2xhc3MnO1xuaW1wb3J0IHsgT3dsRGF0ZVRpbWVGb3JtYXRzIH0gZnJvbSAnLi9hZGFwdGVyL2RhdGUtdGltZS1mb3JtYXQuY2xhc3MnO1xuaW1wb3J0IHsgU2VsZWN0TW9kZSB9IGZyb20gJy4vZGF0ZS10aW1lLmNsYXNzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE93bFllYXJWaWV3Q29tcG9uZW50PFQ+IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY2RSZWY7XG4gICAgcHJpdmF0ZSBkYXRlVGltZUFkYXB0ZXI7XG4gICAgcHJpdmF0ZSBkYXRlVGltZUZvcm1hdHM7XG4gICAgcHJpdmF0ZSBfc2VsZWN0TW9kZTtcbiAgICBzZWxlY3RNb2RlOiBTZWxlY3RNb2RlO1xuICAgIHByaXZhdGUgX3NlbGVjdGVkO1xuICAgIHNlbGVjdGVkOiBUIHwgbnVsbDtcbiAgICBwcml2YXRlIF9zZWxlY3RlZHM7XG4gICAgc2VsZWN0ZWRzOiBUW107XG4gICAgcHJpdmF0ZSBfcGlja2VyTW9tZW50O1xuICAgIHBpY2tlck1vbWVudDogVDtcbiAgICBwcml2YXRlIF9kYXRlRmlsdGVyO1xuICAgIGRhdGVGaWx0ZXI6IChkYXRlOiBUKSA9PiBib29sZWFuO1xuICAgIHByaXZhdGUgX21pbkRhdGU7XG4gICAgbWluRGF0ZTogVCB8IG51bGw7XG4gICAgcHJpdmF0ZSBfbWF4RGF0ZTtcbiAgICBtYXhEYXRlOiBUIHwgbnVsbDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1vbnRoTmFtZXM7XG4gICAgcHJpdmF0ZSBfbW9udGhzO1xuICAgIHJlYWRvbmx5IG1vbnRoczogQ2FsZW5kYXJDZWxsW11bXTtcbiAgICByZWFkb25seSBhY3RpdmVDZWxsOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgaXNJblNpbmdsZU1vZGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNJblJhbmdlTW9kZTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGxvY2FsZVN1YjtcbiAgICBwcml2YXRlIGluaXRpYXRlZDtcbiAgICB0b2RheU1vbnRoOiBudW1iZXIgfCBudWxsO1xuICAgIHNlbGVjdGVkTW9udGhzOiBudW1iZXJbXTtcbiAgICByZWFkb25seSBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxUPjtcbiAgICByZWFkb25seSBtb250aFNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8VD47XG4gICAgcmVhZG9ubHkgcGlja2VyTW9tZW50Q2hhbmdlOiBFdmVudEVtaXR0ZXI8VD47XG4gICAgcmVhZG9ubHkga2V5Ym9hcmRFbnRlcjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY2FsZW5kYXJCb2R5RWxtOiBPd2xDYWxlbmRhckJvZHlDb21wb25lbnQ7XG4gICAgcmVhZG9ubHkgb3dsRFRDYWxlbmRhclZpZXc6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLCBkYXRlVGltZUFkYXB0ZXI6IERhdGVUaW1lQWRhcHRlcjxUPiwgZGF0ZVRpbWVGb3JtYXRzOiBPd2xEYXRlVGltZUZvcm1hdHMpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBzZWxlY3RDYWxlbmRhckNlbGwoY2VsbDogQ2FsZW5kYXJDZWxsKTogdm9pZDtcbiAgICBwcml2YXRlIHNlbGVjdE1vbnRoO1xuICAgIGhhbmRsZUNhbGVuZGFyS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBnZW5lcmF0ZU1vbnRoTGlzdDtcbiAgICBwcml2YXRlIGNyZWF0ZU1vbnRoQ2VsbDtcbiAgICBwcml2YXRlIGlzTW9udGhFbmFibGVkO1xuICAgIHByaXZhdGUgZ2V0TW9udGhJbkN1cnJlbnRZZWFyO1xuICAgIHByaXZhdGUgc2V0U2VsZWN0ZWRNb250aHM7XG4gICAgcHJpdmF0ZSBoYXNTYW1lWWVhcjtcbiAgICBwcml2YXRlIGdldFZhbGlkRGF0ZTtcbiAgICBwcml2YXRlIGZvY3VzQWN0aXZlQ2VsbDtcbn1cbiJdfQ==