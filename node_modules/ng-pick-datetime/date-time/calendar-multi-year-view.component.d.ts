import { AfterContentInit, ChangeDetectorRef, EventEmitter, OnInit } from '@angular/core';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { CalendarCell, OwlCalendarBodyComponent } from './calendar-body.component';
import { SelectMode } from './date-time.class';
import { OwlDateTimeIntl } from './date-time-picker-intl.service';
import * as ɵngcc0 from '@angular/core';
export declare const YEARS_PER_ROW = 3;
export declare const YEAR_ROWS = 7;
export declare class OwlMultiYearViewComponent<T> implements OnInit, AfterContentInit {
    private cdRef;
    private pickerIntl;
    private dateTimeAdapter;
    private _selectMode;
    selectMode: SelectMode;
    private _selected;
    selected: T | null;
    private _selecteds;
    selecteds: T[];
    private _pickerMoment;
    pickerMoment: T;
    private _dateFilter;
    dateFilter: (date: T) => boolean;
    private _minDate;
    minDate: T | null;
    private _maxDate;
    maxDate: T | null;
    private _todayYear;
    readonly todayYear: number;
    private _years;
    readonly years: CalendarCell[][];
    private _selectedYears;
    readonly selectedYears: number[];
    private initiated;
    readonly isInSingleMode: boolean;
    readonly isInRangeMode: boolean;
    readonly activeCell: number;
    readonly tableHeader: string;
    readonly prevButtonLabel: string;
    readonly nextButtonLabel: string;
    readonly change: EventEmitter<T>;
    readonly yearSelected: EventEmitter<T>;
    readonly pickerMomentChange: EventEmitter<T>;
    readonly keyboardEnter: EventEmitter<any>;
    calendarBodyElm: OwlCalendarBodyComponent;
    readonly owlDTCalendarView: boolean;
    readonly owlDTCalendarMultiYearView: boolean;
    constructor(cdRef: ChangeDetectorRef, pickerIntl: OwlDateTimeIntl, dateTimeAdapter: DateTimeAdapter<T>);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    selectCalendarCell(cell: CalendarCell): void;
    private selectYear;
    prevYearList(event: any): void;
    nextYearList(event: any): void;
    generateYearList(): void;
    previousEnabled(): boolean;
    nextEnabled(): boolean;
    handleCalendarKeydown(event: KeyboardEvent): void;
    private createYearCell;
    private setSelectedYears;
    private isYearEnabled;
    private isSameYearList;
    private getValidDate;
    private focusActiveCell;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlMultiYearViewComponent<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlMultiYearViewComponent<any>, "owl-date-time-multi-year-view", never, {
    "selectMode": "selectMode";
    "selected": "selected";
    "selecteds": "selecteds";
    "pickerMoment": "pickerMoment";
    "dateFilter": "dateFilter";
    "minDate": "minDate";
    "maxDate": "maxDate";
}, {
    "change": "change";
    "yearSelected": "yearSelected";
    "pickerMomentChange": "pickerMomentChange";
    "keyboardEnter": "keyboardEnter";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItbXVsdGkteWVhci12aWV3LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjYWxlbmRhci1tdWx0aS15ZWFyLXZpZXcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVUaW1lQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlci9kYXRlLXRpbWUtYWRhcHRlci5jbGFzcyc7XG5pbXBvcnQgeyBDYWxlbmRhckNlbGwsIE93bENhbGVuZGFyQm9keUNvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXItYm9keS5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VsZWN0TW9kZSB9IGZyb20gJy4vZGF0ZS10aW1lLmNsYXNzJztcbmltcG9ydCB7IE93bERhdGVUaW1lSW50bCB9IGZyb20gJy4vZGF0ZS10aW1lLXBpY2tlci1pbnRsLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgWUVBUlNfUEVSX1JPVyA9IDM7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBZRUFSX1JPV1MgPSA3O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgT3dsTXVsdGlZZWFyVmlld0NvbXBvbmVudDxUPiBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgcHJpdmF0ZSBjZFJlZjtcbiAgICBwcml2YXRlIHBpY2tlckludGw7XG4gICAgcHJpdmF0ZSBkYXRlVGltZUFkYXB0ZXI7XG4gICAgcHJpdmF0ZSBfc2VsZWN0TW9kZTtcbiAgICBzZWxlY3RNb2RlOiBTZWxlY3RNb2RlO1xuICAgIHByaXZhdGUgX3NlbGVjdGVkO1xuICAgIHNlbGVjdGVkOiBUIHwgbnVsbDtcbiAgICBwcml2YXRlIF9zZWxlY3RlZHM7XG4gICAgc2VsZWN0ZWRzOiBUW107XG4gICAgcHJpdmF0ZSBfcGlja2VyTW9tZW50O1xuICAgIHBpY2tlck1vbWVudDogVDtcbiAgICBwcml2YXRlIF9kYXRlRmlsdGVyO1xuICAgIGRhdGVGaWx0ZXI6IChkYXRlOiBUKSA9PiBib29sZWFuO1xuICAgIHByaXZhdGUgX21pbkRhdGU7XG4gICAgbWluRGF0ZTogVCB8IG51bGw7XG4gICAgcHJpdmF0ZSBfbWF4RGF0ZTtcbiAgICBtYXhEYXRlOiBUIHwgbnVsbDtcbiAgICBwcml2YXRlIF90b2RheVllYXI7XG4gICAgcmVhZG9ubHkgdG9kYXlZZWFyOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfeWVhcnM7XG4gICAgcmVhZG9ubHkgeWVhcnM6IENhbGVuZGFyQ2VsbFtdW107XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWRZZWFycztcbiAgICByZWFkb25seSBzZWxlY3RlZFllYXJzOiBudW1iZXJbXTtcbiAgICBwcml2YXRlIGluaXRpYXRlZDtcbiAgICByZWFkb25seSBpc0luU2luZ2xlTW9kZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0luUmFuZ2VNb2RlOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGFjdGl2ZUNlbGw6IG51bWJlcjtcbiAgICByZWFkb25seSB0YWJsZUhlYWRlcjogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHByZXZCdXR0b25MYWJlbDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IG5leHRCdXR0b25MYWJlbDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGNoYW5nZTogRXZlbnRFbWl0dGVyPFQ+O1xuICAgIHJlYWRvbmx5IHllYXJTZWxlY3RlZDogRXZlbnRFbWl0dGVyPFQ+O1xuICAgIHJlYWRvbmx5IHBpY2tlck1vbWVudENoYW5nZTogRXZlbnRFbWl0dGVyPFQ+O1xuICAgIHJlYWRvbmx5IGtleWJvYXJkRW50ZXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGNhbGVuZGFyQm9keUVsbTogT3dsQ2FsZW5kYXJCb2R5Q29tcG9uZW50O1xuICAgIHJlYWRvbmx5IG93bERUQ2FsZW5kYXJWaWV3OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IG93bERUQ2FsZW5kYXJNdWx0aVllYXJWaWV3OiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgcGlja2VySW50bDogT3dsRGF0ZVRpbWVJbnRsLCBkYXRlVGltZUFkYXB0ZXI6IERhdGVUaW1lQWRhcHRlcjxUPik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBzZWxlY3RDYWxlbmRhckNlbGwoY2VsbDogQ2FsZW5kYXJDZWxsKTogdm9pZDtcbiAgICBwcml2YXRlIHNlbGVjdFllYXI7XG4gICAgcHJldlllYXJMaXN0KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG5leHRZZWFyTGlzdChldmVudDogYW55KTogdm9pZDtcbiAgICBnZW5lcmF0ZVllYXJMaXN0KCk6IHZvaWQ7XG4gICAgcHJldmlvdXNFbmFibGVkKCk6IGJvb2xlYW47XG4gICAgbmV4dEVuYWJsZWQoKTogYm9vbGVhbjtcbiAgICBoYW5kbGVDYWxlbmRhcktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIHByaXZhdGUgY3JlYXRlWWVhckNlbGw7XG4gICAgcHJpdmF0ZSBzZXRTZWxlY3RlZFllYXJzO1xuICAgIHByaXZhdGUgaXNZZWFyRW5hYmxlZDtcbiAgICBwcml2YXRlIGlzU2FtZVllYXJMaXN0O1xuICAgIHByaXZhdGUgZ2V0VmFsaWREYXRlO1xuICAgIHByaXZhdGUgZm9jdXNBY3RpdmVDZWxsO1xufVxuIl19