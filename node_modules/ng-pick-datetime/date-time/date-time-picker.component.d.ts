import { ChangeDetectorRef, EventEmitter, InjectionToken, NgZone, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import { BlockScrollStrategy, Overlay, ScrollStrategy } from '@angular/cdk/overlay';
import { OwlDateTimeInputDirective } from './date-time-picker-input.directive';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { OwlDateTimeFormats } from './adapter/date-time-format.class';
import { OwlDateTime, PickerMode, PickerType, SelectMode } from './date-time.class';
import { OwlDialogService } from '../dialog';
import * as ɵngcc0 from '@angular/core';
export declare const OWL_DTPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
export declare function OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => BlockScrollStrategy;
export declare const OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    deps: (typeof Overlay)[];
    useFactory: typeof OWL_DTPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY;
};
export declare class OwlDateTimeComponent<T> extends OwlDateTime<T> implements OnInit, OnDestroy {
    private overlay;
    private viewContainerRef;
    private dialogService;
    private ngZone;
    protected changeDetector: ChangeDetectorRef;
    protected dateTimeAdapter: DateTimeAdapter<T>;
    private defaultScrollStrategy;
    protected dateTimeFormats: OwlDateTimeFormats;
    private document;
    backdropClass: string | string[];
    panelClass: string | string[];
    private _startAt;
    startAt: T | null;
    private _pickerType;
    pickerType: PickerType;
    _pickerMode: PickerMode;
    pickerMode: PickerMode;
    private _disabled;
    disabled: boolean;
    private _opened;
    opened: boolean;
    scrollStrategy: ScrollStrategy;
    afterPickerClosed: EventEmitter<any>;
    afterPickerOpen: EventEmitter<any>;
    yearSelected: EventEmitter<T>;
    monthSelected: EventEmitter<T>;
    confirmSelectedChange: EventEmitter<T | T[]>;
    disabledChange: EventEmitter<boolean>;
    private pickerContainerPortal;
    private pickerContainer;
    private popupRef;
    private dialogRef;
    private dtInputSub;
    private hidePickerStreamSub;
    private confirmSelectedStreamSub;
    private pickerOpenedStreamSub;
    private focusedElementBeforeOpen;
    private _dtInput;
    readonly dtInput: OwlDateTimeInputDirective<T>;
    private _selected;
    selected: T | null;
    private _selecteds;
    selecteds: T[];
    readonly minDateTime: T | null;
    readonly maxDateTime: T | null;
    readonly dateTimeFilter: (date: T | null) => boolean;
    readonly selectMode: SelectMode;
    readonly isInSingleMode: boolean;
    readonly isInRangeMode: boolean;
    constructor(overlay: Overlay, viewContainerRef: ViewContainerRef, dialogService: OwlDialogService, ngZone: NgZone, changeDetector: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, defaultScrollStrategy: () => ScrollStrategy, dateTimeFormats: OwlDateTimeFormats, document: any);
    ngOnInit(): void;
    ngOnDestroy(): void;
    registerInput(input: OwlDateTimeInputDirective<T>): void;
    open(): void;
    select(date: T[] | T): void;
    selectYear(normalizedYear: T): void;
    selectMonth(normalizedMonth: T): void;
    close(): void;
    confirmSelect(event?: any): void;
    private openAsDialog;
    private openAsPopup;
    private createPopup;
    private createPopupPositionStrategy;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlDateTimeComponent<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlDateTimeComponent<any>, "owl-date-time", ["owlDateTime"], {
    "startAt": "startAt";
    "pickerType": "pickerType";
    "pickerMode": "pickerMode";
    "disabled": "disabled";
    "opened": "opened";
    "backdropClass": "backdropClass";
    "panelClass": "panelClass";
    "scrollStrategy": "scrollStrategy";
}, {
    "afterPickerClosed": "afterPickerClosed";
    "afterPickerOpen": "afterPickerOpen";
    "yearSelected": "yearSelected";
    "monthSelected": "monthSelected";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZS10aW1lLXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgSW5qZWN0aW9uVG9rZW4sIE5nWm9uZSwgT25EZXN0cm95LCBPbkluaXQsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJsb2NrU2Nyb2xsU3RyYXRlZ3ksIE92ZXJsYXksIFNjcm9sbFN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgT3dsRGF0ZVRpbWVJbnB1dERpcmVjdGl2ZSB9IGZyb20gJy4vZGF0ZS10aW1lLXBpY2tlci1pbnB1dC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRGF0ZVRpbWVBZGFwdGVyIH0gZnJvbSAnLi9hZGFwdGVyL2RhdGUtdGltZS1hZGFwdGVyLmNsYXNzJztcbmltcG9ydCB7IE93bERhdGVUaW1lRm9ybWF0cyB9IGZyb20gJy4vYWRhcHRlci9kYXRlLXRpbWUtZm9ybWF0LmNsYXNzJztcbmltcG9ydCB7IE93bERhdGVUaW1lLCBQaWNrZXJNb2RlLCBQaWNrZXJUeXBlLCBTZWxlY3RNb2RlIH0gZnJvbSAnLi9kYXRlLXRpbWUuY2xhc3MnO1xuaW1wb3J0IHsgT3dsRGlhbG9nU2VydmljZSB9IGZyb20gJy4uL2RpYWxvZyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBPV0xfRFRQSUNLRVJfU0NST0xMX1NUUkFURUdZOiBJbmplY3Rpb25Ub2tlbjwoKSA9PiBTY3JvbGxTdHJhdGVneT47XG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBPV0xfRFRQSUNLRVJfU0NST0xMX1NUUkFURUdZX1BST1ZJREVSX0ZBQ1RPUlkob3ZlcmxheTogT3ZlcmxheSk6ICgpID0+IEJsb2NrU2Nyb2xsU3RyYXRlZ3k7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBPV0xfRFRQSUNLRVJfU0NST0xMX1NUUkFURUdZX1BST1ZJREVSOiB7XG4gICAgcHJvdmlkZTogSW5qZWN0aW9uVG9rZW48KCkgPT4gU2Nyb2xsU3RyYXRlZ3k+O1xuICAgIGRlcHM6ICh0eXBlb2YgT3ZlcmxheSlbXTtcbiAgICB1c2VGYWN0b3J5OiB0eXBlb2YgT1dMX0RUUElDS0VSX1NDUk9MTF9TVFJBVEVHWV9QUk9WSURFUl9GQUNUT1JZO1xufTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE93bERhdGVUaW1lQ29tcG9uZW50PFQ+IGV4dGVuZHMgT3dsRGF0ZVRpbWU8VD4gaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBvdmVybGF5O1xuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIGRpYWxvZ1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJvdGVjdGVkIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcm90ZWN0ZWQgZGF0ZVRpbWVBZGFwdGVyOiBEYXRlVGltZUFkYXB0ZXI8VD47XG4gICAgcHJpdmF0ZSBkZWZhdWx0U2Nyb2xsU3RyYXRlZ3k7XG4gICAgcHJvdGVjdGVkIGRhdGVUaW1lRm9ybWF0czogT3dsRGF0ZVRpbWVGb3JtYXRzO1xuICAgIHByaXZhdGUgZG9jdW1lbnQ7XG4gICAgYmFja2Ryb3BDbGFzczogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgcGFuZWxDbGFzczogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgcHJpdmF0ZSBfc3RhcnRBdDtcbiAgICBzdGFydEF0OiBUIHwgbnVsbDtcbiAgICBwcml2YXRlIF9waWNrZXJUeXBlO1xuICAgIHBpY2tlclR5cGU6IFBpY2tlclR5cGU7XG4gICAgX3BpY2tlck1vZGU6IFBpY2tlck1vZGU7XG4gICAgcGlja2VyTW9kZTogUGlja2VyTW9kZTtcbiAgICBwcml2YXRlIF9kaXNhYmxlZDtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9vcGVuZWQ7XG4gICAgb3BlbmVkOiBib29sZWFuO1xuICAgIHNjcm9sbFN0cmF0ZWd5OiBTY3JvbGxTdHJhdGVneTtcbiAgICBhZnRlclBpY2tlckNsb3NlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYWZ0ZXJQaWNrZXJPcGVuOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB5ZWFyU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxUPjtcbiAgICBtb250aFNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8VD47XG4gICAgY29uZmlybVNlbGVjdGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8VCB8IFRbXT47XG4gICAgZGlzYWJsZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICBwcml2YXRlIHBpY2tlckNvbnRhaW5lclBvcnRhbDtcbiAgICBwcml2YXRlIHBpY2tlckNvbnRhaW5lcjtcbiAgICBwcml2YXRlIHBvcHVwUmVmO1xuICAgIHByaXZhdGUgZGlhbG9nUmVmO1xuICAgIHByaXZhdGUgZHRJbnB1dFN1YjtcbiAgICBwcml2YXRlIGhpZGVQaWNrZXJTdHJlYW1TdWI7XG4gICAgcHJpdmF0ZSBjb25maXJtU2VsZWN0ZWRTdHJlYW1TdWI7XG4gICAgcHJpdmF0ZSBwaWNrZXJPcGVuZWRTdHJlYW1TdWI7XG4gICAgcHJpdmF0ZSBmb2N1c2VkRWxlbWVudEJlZm9yZU9wZW47XG4gICAgcHJpdmF0ZSBfZHRJbnB1dDtcbiAgICByZWFkb25seSBkdElucHV0OiBPd2xEYXRlVGltZUlucHV0RGlyZWN0aXZlPFQ+O1xuICAgIHByaXZhdGUgX3NlbGVjdGVkO1xuICAgIHNlbGVjdGVkOiBUIHwgbnVsbDtcbiAgICBwcml2YXRlIF9zZWxlY3RlZHM7XG4gICAgc2VsZWN0ZWRzOiBUW107XG4gICAgcmVhZG9ubHkgbWluRGF0ZVRpbWU6IFQgfCBudWxsO1xuICAgIHJlYWRvbmx5IG1heERhdGVUaW1lOiBUIHwgbnVsbDtcbiAgICByZWFkb25seSBkYXRlVGltZUZpbHRlcjogKGRhdGU6IFQgfCBudWxsKSA9PiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHNlbGVjdE1vZGU6IFNlbGVjdE1vZGU7XG4gICAgcmVhZG9ubHkgaXNJblNpbmdsZU1vZGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNJblJhbmdlTW9kZTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihvdmVybGF5OiBPdmVybGF5LCB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBkaWFsb2dTZXJ2aWNlOiBPd2xEaWFsb2dTZXJ2aWNlLCBuZ1pvbmU6IE5nWm9uZSwgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLCBkYXRlVGltZUFkYXB0ZXI6IERhdGVUaW1lQWRhcHRlcjxUPiwgZGVmYXVsdFNjcm9sbFN0cmF0ZWd5OiAoKSA9PiBTY3JvbGxTdHJhdGVneSwgZGF0ZVRpbWVGb3JtYXRzOiBPd2xEYXRlVGltZUZvcm1hdHMsIGRvY3VtZW50OiBhbnkpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICByZWdpc3RlcklucHV0KGlucHV0OiBPd2xEYXRlVGltZUlucHV0RGlyZWN0aXZlPFQ+KTogdm9pZDtcbiAgICBvcGVuKCk6IHZvaWQ7XG4gICAgc2VsZWN0KGRhdGU6IFRbXSB8IFQpOiB2b2lkO1xuICAgIHNlbGVjdFllYXIobm9ybWFsaXplZFllYXI6IFQpOiB2b2lkO1xuICAgIHNlbGVjdE1vbnRoKG5vcm1hbGl6ZWRNb250aDogVCk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBjb25maXJtU2VsZWN0KGV2ZW50PzogYW55KTogdm9pZDtcbiAgICBwcml2YXRlIG9wZW5Bc0RpYWxvZztcbiAgICBwcml2YXRlIG9wZW5Bc1BvcHVwO1xuICAgIHByaXZhdGUgY3JlYXRlUG9wdXA7XG4gICAgcHJpdmF0ZSBjcmVhdGVQb3B1cFBvc2l0aW9uU3RyYXRlZ3k7XG59XG4iXX0=