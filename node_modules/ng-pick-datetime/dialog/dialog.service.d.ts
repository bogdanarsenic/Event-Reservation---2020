import { InjectionToken, Injector, TemplateRef } from '@angular/core';
import { Location } from '@angular/common';
import { OwlDialogConfig } from './dialog-config.class';
import { OwlDialogRef } from './dialog-ref.class';
import { Observable, Subject } from 'rxjs';
import { Overlay, OverlayContainer, ScrollStrategy } from '@angular/cdk/overlay';
import { ComponentType } from '@angular/cdk/portal';
import * as ɵngcc0 from '@angular/core';
export declare const OWL_DIALOG_DATA: InjectionToken<any>;
export declare const OWL_DIALOG_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
export declare function OWL_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => ScrollStrategy;
export declare const OWL_DIALOG_SCROLL_STRATEGY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    deps: (typeof Overlay)[];
    useFactory: typeof OWL_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY;
};
export declare const OWL_DIALOG_DEFAULT_OPTIONS: InjectionToken<OwlDialogConfig>;
export declare class OwlDialogService {
    private overlay;
    private injector;
    private location;
    private scrollStrategy;
    private defaultOptions;
    private parentDialog;
    private overlayContainer;
    private ariaHiddenElements;
    private _openDialogsAtThisLevel;
    private _afterOpenAtThisLevel;
    private _afterAllClosedAtThisLevel;
    readonly openDialogs: OwlDialogRef<any>[];
    readonly afterOpen: Subject<OwlDialogRef<any>>;
    readonly _afterAllClosed: any;
    afterAllClosed: Observable<void>;
    constructor(overlay: Overlay, injector: Injector, location: Location, scrollStrategy: () => ScrollStrategy, defaultOptions: OwlDialogConfig, parentDialog: OwlDialogService, overlayContainer: OverlayContainer);
    open<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>, config?: OwlDialogConfig): OwlDialogRef<any>;
    closeAll(): void;
    getDialogById(id: string): OwlDialogRef<any> | undefined;
    private attachDialogContent;
    private createInjector;
    private createOverlay;
    private attachDialogContainer;
    private getOverlayConfig;
    private removeOpenDialog;
    private hideNonDialogContentFromAssistiveTechnology;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlDialogService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<OwlDialogService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZGlhbG9nLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0b3IsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBPd2xEaWFsb2dDb25maWcgfSBmcm9tICcuL2RpYWxvZy1jb25maWcuY2xhc3MnO1xuaW1wb3J0IHsgT3dsRGlhbG9nUmVmIH0gZnJvbSAnLi9kaWFsb2ctcmVmLmNsYXNzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE92ZXJsYXksIE92ZXJsYXlDb250YWluZXIsIFNjcm9sbFN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQ29tcG9uZW50VHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgT1dMX0RJQUxPR19EQVRBOiBJbmplY3Rpb25Ub2tlbjxhbnk+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgT1dMX0RJQUxPR19TQ1JPTExfU1RSQVRFR1k6IEluamVjdGlvblRva2VuPCgpID0+IFNjcm9sbFN0cmF0ZWd5PjtcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIE9XTF9ESUFMT0dfU0NST0xMX1NUUkFURUdZX1BST1ZJREVSX0ZBQ1RPUlkob3ZlcmxheTogT3ZlcmxheSk6ICgpID0+IFNjcm9sbFN0cmF0ZWd5O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgT1dMX0RJQUxPR19TQ1JPTExfU1RSQVRFR1lfUFJPVklERVI6IHtcbiAgICBwcm92aWRlOiBJbmplY3Rpb25Ub2tlbjwoKSA9PiBTY3JvbGxTdHJhdGVneT47XG4gICAgZGVwczogKHR5cGVvZiBPdmVybGF5KVtdO1xuICAgIHVzZUZhY3Rvcnk6IHR5cGVvZiBPV0xfRElBTE9HX1NDUk9MTF9TVFJBVEVHWV9QUk9WSURFUl9GQUNUT1JZO1xufTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IE9XTF9ESUFMT0dfREVGQVVMVF9PUFRJT05TOiBJbmplY3Rpb25Ub2tlbjxPd2xEaWFsb2dDb25maWc+O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgT3dsRGlhbG9nU2VydmljZSB7XG4gICAgcHJpdmF0ZSBvdmVybGF5O1xuICAgIHByaXZhdGUgaW5qZWN0b3I7XG4gICAgcHJpdmF0ZSBsb2NhdGlvbjtcbiAgICBwcml2YXRlIHNjcm9sbFN0cmF0ZWd5O1xuICAgIHByaXZhdGUgZGVmYXVsdE9wdGlvbnM7XG4gICAgcHJpdmF0ZSBwYXJlbnREaWFsb2c7XG4gICAgcHJpdmF0ZSBvdmVybGF5Q29udGFpbmVyO1xuICAgIHByaXZhdGUgYXJpYUhpZGRlbkVsZW1lbnRzO1xuICAgIHByaXZhdGUgX29wZW5EaWFsb2dzQXRUaGlzTGV2ZWw7XG4gICAgcHJpdmF0ZSBfYWZ0ZXJPcGVuQXRUaGlzTGV2ZWw7XG4gICAgcHJpdmF0ZSBfYWZ0ZXJBbGxDbG9zZWRBdFRoaXNMZXZlbDtcbiAgICByZWFkb25seSBvcGVuRGlhbG9nczogT3dsRGlhbG9nUmVmPGFueT5bXTtcbiAgICByZWFkb25seSBhZnRlck9wZW46IFN1YmplY3Q8T3dsRGlhbG9nUmVmPGFueT4+O1xuICAgIHJlYWRvbmx5IF9hZnRlckFsbENsb3NlZDogYW55O1xuICAgIGFmdGVyQWxsQ2xvc2VkOiBPYnNlcnZhYmxlPHZvaWQ+O1xuICAgIGNvbnN0cnVjdG9yKG92ZXJsYXk6IE92ZXJsYXksIGluamVjdG9yOiBJbmplY3RvciwgbG9jYXRpb246IExvY2F0aW9uLCBzY3JvbGxTdHJhdGVneTogKCkgPT4gU2Nyb2xsU3RyYXRlZ3ksIGRlZmF1bHRPcHRpb25zOiBPd2xEaWFsb2dDb25maWcsIHBhcmVudERpYWxvZzogT3dsRGlhbG9nU2VydmljZSwgb3ZlcmxheUNvbnRhaW5lcjogT3ZlcmxheUNvbnRhaW5lcik7XG4gICAgb3BlbjxUPihjb21wb25lbnRPclRlbXBsYXRlUmVmOiBDb21wb25lbnRUeXBlPFQ+IHwgVGVtcGxhdGVSZWY8VD4sIGNvbmZpZz86IE93bERpYWxvZ0NvbmZpZyk6IE93bERpYWxvZ1JlZjxhbnk+O1xuICAgIGNsb3NlQWxsKCk6IHZvaWQ7XG4gICAgZ2V0RGlhbG9nQnlJZChpZDogc3RyaW5nKTogT3dsRGlhbG9nUmVmPGFueT4gfCB1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSBhdHRhY2hEaWFsb2dDb250ZW50O1xuICAgIHByaXZhdGUgY3JlYXRlSW5qZWN0b3I7XG4gICAgcHJpdmF0ZSBjcmVhdGVPdmVybGF5O1xuICAgIHByaXZhdGUgYXR0YWNoRGlhbG9nQ29udGFpbmVyO1xuICAgIHByaXZhdGUgZ2V0T3ZlcmxheUNvbmZpZztcbiAgICBwcml2YXRlIHJlbW92ZU9wZW5EaWFsb2c7XG4gICAgcHJpdmF0ZSBoaWRlTm9uRGlhbG9nQ29udGVudEZyb21Bc3Npc3RpdmVUZWNobm9sb2d5O1xufVxuIl19