{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker-time.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/ngx-timepicker-field.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","AM","PM","isSameOrAfter","time","compareWith","unit","hour","hasSame","valueOf","isSameOrBefore","isDigit","e","some","keyCode","ctrlKey","metaKey","TimeAdapter","parseTime","format","indexOf","period","trim","substr","toUpperCase","isPeriodValid","TimePeriod","_a","__read","o","m","Symbol","iterator","r","ar","next","done","push","value","error","split","h","formatHour","parseInt","isPM","formatTime","timeFormat","TimeFormat","timeMask","DateTime","fromFormat","toFormat","toLowerCase","convertTimeToDateTime","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","minutes","minute","Error","isAfter","isBefore","between","isBetween","before","after","currentHour","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","defineProperty","asObservable","setDefaultTimeIfAvailable","setDefaultTime","console","getFullTime","getValue","defaultTime","toJSDate","fromJSDate","isValid","getHours","formatHourByPeriod","getMinutes","resetTime","Injectable","args","providedIn","HOUR","MINUTE","NgxMaterialTimepickerEventService","backdropClickSubject","Subject","keydownEventSubject","dispatchEvent","event","type","ENTER","LEAVE","NgxMaterialTimepickerComponent","timepickerService","eventService","_this","timeUnit","TimeUnit","activeTimeUnit","isOpened","isEsc","timeSet","EventEmitter","opened","closed","hourSelected","subscriptions","merge","backdropClick","keydownEvent","pipe","filter","subscribe","close","timepickerInput","_format","_minutesGap","gap","Math","floor","disabled","ngOnInit","selectedHour","selectedMinute","selectedPeriod","registerInput","input","onHourChange","onHourSelected","changeTimeUnit","onMinuteChange","changePeriod","setTime","open","disableAnimation","animationState","AnimationState","closeTimepicker","animationDone","phaseName","toState","onKeydown","stopPropagation","ngOnDestroy","forEach","subscription","unsubscribe","Component","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","Input","Output","HostListener","NgxMaterialTimepickerToggleIconDirective","Directive","NgxMaterialTimepickerToggleComponent","_disabled","undefined","timepicker","ContentChild","VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TimepickerDirective","multi","elementRef","_value","timepickerSubscriptions","onTouched","onChange","_min","_max","picker","registerTimepicker","updateInputValue","_timepicker","warn","onInput","ngOnChanges","changes","currentValue","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","nativeElement","host","[disabled]","(input)","(blur)","ElementRef","NgxMaterialTimepickerThemeDirective","element","ngAfterViewInit","theme","setTheme","val","prop","setProperty","replace","fill","map","v","disableHours","hours","config","currentTime","fromObject","disableMinutes","hour_1","NgxMaterialTimepickerHoursFace","hourChange","hoursList","onTimeSelected","NgxMaterialTimepicker24HoursFaceComponent","_super","tslib_1.__extends","ngAfterContentInit","minTime","maxTime","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","countAngleByCords","x0","y0","x","y","currentAngle","isInnerClockChosen","isInnerClockFace","angleStep","roundedAngle","roundAngle","onMouseup","isHourSelected","isClockFaceDisabled","isMinuteSelected","removeTouchEvents","touchStartHandler","bind","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","every","availableTime","sqrt","pow","changeDetection","ChangeDetectionStrategy","OnPush","ViewChild","step","round","NgxMaterialTimepickerButtonComponent","NgxMaterialTimepickerDialComponent","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","showHint","isHintVisible","hideHint","TimeFormatterPipe","Pipe","name","NgxMaterialTimepickerDialControlComponent","timeChanged","focused","unfocused","timeList","isEditable","firstChange","saveTimeAndChangeTimeUnit","previousTime","updateTime","onKeyDown","char","String","fromCharCode","isTimeDisabledToChange","nextTime","test","isTimeUnavailable","changeTimeByArrow","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","StyleSanitizerPipe","domSanitizer","bypassSecurityTrustStyle","DomSanitizer","OverlayDirective","preventClick","MinutesFormatterPipe","AutofocusDirective","document","activeElement","isFocusActive","focus","Optional","Inject","DOCUMENT","NgxTimepickerFieldComponent","minHour","maxHour","buttonAlign","unsubscribe$","_defaultTime","timepickerTime","period$","takeUntil","changeTime","onTimeSet","NgxTimepickerTimeControlComponent","key","increase","decrease","emit","isNaN","onFocus","isFocused","onBlur","NgxTimepickerPeriodSelectorComponent","periodSelected","select","NgxMaterialTimepickerModule","NgModule","imports","CommonModule","FormsModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TimePeriod {\n    AM = 'AM',\n    PM = 'PM'\n}\n","export enum TimeFormat {\n    TWELVE = 'hh:mm a',\n    TWELVE_SHORT = 'h:m a',\n    TWENTY_FOUR = 'HH:mm',\n    TWENTY_FOUR_SHORT = 'H:m'\n}\n","/* tslint:disable */\nimport { DateTime } from 'luxon';\n\n\nexport function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour >= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n    }\n}\n\nexport function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour <= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n    }\n}\n\nexport function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\n    }\n    if (unit === 'minutes') {\n        return isSameOrBefore(time, after) && isSameOrAfter(time, before);\n    }\n}\n\nexport function isDigit(e: KeyboardEvent) {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n        // Allow: Ctrl/cmd+A\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+C\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+X\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: home, end, left, right, up, down\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n        return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n}\n","import { DateTime } from 'luxon';\n\nimport { TimeFormat } from '../models/time-format.enum';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils';\n\n// @dynamic\nexport class TimeAdapter {\n\n    static parseTime(time: string, format = 12): string {\n        if (time.indexOf(':') === -1) {\n            return 'Invalid time';\n        }\n        let period = time.trim().substr(time.length - 2).toUpperCase();\n\n        const isPeriodValid = period === TimePeriod.AM || period === TimePeriod.PM;\n        const [h, m] = time.split(':');\n\n\n        if (format === 24) {\n            const formattedHours = isPeriodValid ? this.formatHour(+h, 12, period as TimePeriod) : +h;\n            return `${formattedHours}:${parseInt(m, 10)}`;\n        }\n\n        const isPM = +h > 12;\n        const hours = isPM ? +h - 12 : +h;\n\n        period = isPeriodValid ? period : isPM ? TimePeriod.PM : TimePeriod.AM;\n\n        return `${hours}:${parseInt(m, 10)} ${period}`;\n    }\n\n    static formatTime(time: string, format = 12): string {\n        const timeFormat = (format === 24) ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\n\n        return DateTime.fromFormat(this.parseTime(time, format), timeMask).toFormat(timeFormat).toLowerCase();\n    }\n\n    static convertTimeToDateTime(time: string, format = 12): DateTime {\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\n        return DateTime.fromFormat(this.parseTime(time, format), timeMask);\n    }\n\n    static isTimeAvailable(\n        time: string,\n        min?: DateTime,\n        max?: DateTime,\n        granularity?: 'hours' | 'minutes',\n        minutesGap?: number,\n        format?: number\n    ): boolean {\n\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.convertTimeToDateTime(time, format);\n        const minutes = convertedTime.minute;\n\n        if (minutesGap && (minutes % minutesGap !== 0)) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && isSameOrBefore(convertedTime, max, granularity);\n        const between = (min && max)\n            && isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || between || isAvailable;\n    }\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n        if (period === TimePeriod.AM && hour === 12) {\n            return 0;\n        } else if (period === TimePeriod.PM && hour === 24) {\n            return 12;\n        }\n        return hour;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { TimeAdapter } from './time-adapter';\nimport { DateTime } from 'luxon';\n\n\nconst DEFAULT_HOUR: ClockFaceTime = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: ClockFaceTime = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerService {\n\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\n\n\n    set hour(hour: ClockFaceTime) {\n        this.hourSubject.next(hour);\n    }\n\n    get selectedHour(): Observable<ClockFaceTime> {\n        return this.hourSubject.asObservable();\n    }\n\n    set minute(minute: ClockFaceTime) {\n        this.minuteSubject.next(minute);\n    }\n\n    get selectedMinute(): Observable<ClockFaceTime> {\n        return this.minuteSubject.asObservable();\n    }\n\n    set period(period: TimePeriod) {\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\n\n        if (isPeriodValid) {\n            this.periodSubject.next(period);\n        }\n    }\n\n    get selectedPeriod(): Observable<TimePeriod> {\n        return this.periodSubject.asObservable();\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n                this.setDefaultTime(TimeAdapter.formatTime(time, format), format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getFullTime(format: number): string {\n        const hour = this.hourSubject.getValue().time;\n        const minute = this.minuteSubject.getValue().time;\n        const period = format === 12 ? this.periodSubject.getValue() : '';\n\n        return TimeAdapter.formatTime(`${hour}:${minute} ${period}`, format);\n    }\n\n    private setDefaultTime(time: string, format: number) {\n        const defaultTime = TimeAdapter.convertTimeToDateTime(time, format).toJSDate();\n\n        if (DateTime.fromJSDate(defaultTime).isValid) {\n            const period = time.substr(time.length - 2).toUpperCase();\n            const hour = defaultTime.getHours();\n\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as TimePeriod)};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = period as TimePeriod;\n\n        } else {\n            this.resetTime();\n        }\n    }\n\n    private resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = TimePeriod.AM;\n    }\n}\n\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour: number, period: TimePeriod): number {\n    switch (period) {\n        case TimePeriod.AM:\n            return hour === 0 ? 12 : hour;\n        case TimePeriod.PM:\n            return hour === 12 ? 12 : hour - 12;\n        default:\n            return hour;\n    }\n}\n","export enum TimeUnit {\n    HOUR,\n    MINUTE\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerEventService {\n\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this.backdropClickSubject.asObservable();\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this.keydownEventSubject.asObservable();\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case 'click':\n                this.backdropClickSubject.next(<MouseEvent>event);\n                break;\n            case 'keydown':\n                this.keydownEventSubject.next(<KeyboardEvent>event);\n                break;\n            default:\n                throw new Error('no such event type');\n        }\n    }\n\n}\n","import { Component, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef } from '@angular/core';\nimport { ClockFaceTime } from './models/clock-face-time.interface';\nimport { TimePeriod } from './models/time-period.enum';\nimport { merge, Subscription } from 'rxjs';\nimport { NgxMaterialTimepickerService } from './services/ngx-material-timepicker.service';\nimport { TimeUnit } from './models/time-unit.enum';\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\nimport { filter } from 'rxjs/operators';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { DateTime } from 'luxon';\n\nexport enum AnimationState {\n    ENTER = 'enter',\n    LEAVE = 'leave'\n}\n\n\nconst ESCAPE = 27;\n\n@Component({\n    selector: 'ngx-material-timepicker',\n    templateUrl: './ngx-material-timepicker.component.html',\n    styleUrls: ['./ngx-material-timepicker.component.scss'],\n    animations: [\n        trigger('timepicker', [\n            transition(`* => ${AnimationState.ENTER}`, [\n                style({transform: 'translateY(-30%)'}),\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\n            ]),\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\n                style({transform: 'translateY(0)', opacity: 1}),\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\n            ])\n        ])\n    ],\n    providers: [NgxMaterialTimepickerService]\n})\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\n\n    selectedHour: ClockFaceTime;\n    selectedMinute: ClockFaceTime;\n    selectedPeriod: TimePeriod;\n\n    timeUnit = TimeUnit;\n    activeTimeUnit = TimeUnit.HOUR;\n\n    isOpened = false;\n    animationState: AnimationState;\n\n\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input('ESC') isEsc = true;\n    @Input() enableKeyboardInput: boolean;\n    @Input() preventOverlayClick: boolean;\n    @Input() disableAnimation: boolean;\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get format(): number {\n        return this.timepickerInput ? this.timepickerInput.format : this._format;\n    }\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Input()\n    set defaultTime(time: string) {\n        this.setDefaultTime(time);\n    }\n\n    @Output() timeSet = new EventEmitter<string>();\n    @Output() opened = new EventEmitter<null>();\n    @Output() closed = new EventEmitter<null>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    private _minutesGap: number;\n    private _format: number;\n    private timepickerInput: TimepickerDirective;\n    private subscriptions: Subscription[] = [];\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                private eventService: NgxMaterialTimepickerEventService) {\n\n        this.subscriptions.push(merge(this.eventService.backdropClick,\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\n            .subscribe(() => this.close()));\n\n    }\n\n    get minTime(): string | DateTime {\n        return this.timepickerInput && this.timepickerInput.min;\n    }\n\n    get maxTime(): string | DateTime {\n        return this.timepickerInput && this.timepickerInput.max;\n    }\n\n    get disabled(): boolean {\n        return this.timepickerInput && this.timepickerInput.disabled;\n    }\n\n    ngOnInit() {\n        this.subscriptions.push(this.timepickerService.selectedHour\n            .subscribe(hour => this.selectedHour = hour));\n\n        this.subscriptions.push(this.timepickerService.selectedMinute\n            .subscribe(minute => this.selectedMinute = minute));\n\n        this.subscriptions.push(this.timepickerService.selectedPeriod\n            .subscribe(period => this.selectedPeriod = period));\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: TimepickerDirective): void {\n        if (this.timepickerInput) {\n            throw Error('A Timepicker can only be associated with a single input.');\n        }\n        this.timepickerInput = input;\n    }\n\n    onHourChange(hour: ClockFaceTime): void {\n        this.timepickerService.hour = hour;\n    }\n\n    onHourSelected(hour: number): void {\n        this.changeTimeUnit(TimeUnit.MINUTE);\n        this.hourSelected.next(hour);\n    }\n\n    onMinuteChange(minute: ClockFaceTime): void {\n        this.timepickerService.minute = minute;\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.activeTimeUnit = unit;\n    }\n\n    setTime(): void {\n        this.timeSet.next(this.timepickerService.getFullTime(this.format));\n        this.close();\n    }\n\n    setDefaultTime(time: string): void {\n        this.timepickerService.setDefaultTimeIfAvailable(\n            time, this.minTime as DateTime, this.maxTime as DateTime, this.format, this.minutesGap);\n    }\n\n    open(): void {\n        this.isOpened = true;\n        if (!this.disableAnimation) {\n            this.animationState = AnimationState.ENTER;\n        }\n        this.opened.next();\n    }\n\n    close(): void {\n        if (this.disableAnimation) {\n            this.closeTimepicker();\n            return;\n        }\n        this.animationState = AnimationState.LEAVE;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n            this.closeTimepicker();\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(e: KeyboardEvent) {\n        this.eventService.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    private closeTimepicker(): void {\n        this.isOpened = false;\n        this.activeTimeUnit = TimeUnit.HOUR;\n        this.closed.next();\n    }\n}\n","import {Directive} from '@angular/core';\n\n/* To override a default toggle icon */\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\n\nexport class NgxMaterialTimepickerToggleIconDirective {\n}\n","import {Component, ContentChild, Input} from '@angular/core';\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\n\n@Component({\n    selector: 'ngx-material-timepicker-toggle',\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\n})\n\nexport class NgxMaterialTimepickerToggleComponent {\n\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    private _disabled: boolean;\n\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective) customIcon: NgxMaterialTimepickerToggleIconDirective;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import { Directive, ElementRef, forwardRef, HostListener, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { DateTime } from 'luxon';\n\nconst VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line\n    useExisting: forwardRef(() => TimepickerDirective),\n    multi: true\n};\n\n@Directive({\n    selector: '[ngxTimepicker]',\n    providers: [VALUE_ACCESSOR],\n    host: {\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(blur)': 'onTouched()',\n    },\n})\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    private _format = 12;\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.convertTimeToDateTime(value, this._format);\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    private _min: string | DateTime;\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.convertTimeToDateTime(value, this._format);\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    private _max: string | DateTime;\n\n    @Input('ngxTimepicker')\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\n        this.registerTimepicker(picker);\n    }\n\n    private _timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = '';\n            this.updateInputValue();\n            return;\n        }\n        const time = TimeAdapter.formatTime(value, this._format);\n        const isAvailable = TimeAdapter.isTimeAvailable(\n            time,\n            <DateTime>this._min,\n            <DateTime>this._max,\n            'minutes',\n            this._timepicker.minutesGap,\n            this._format\n        );\n\n        if (isAvailable) {\n            this._value = time;\n            this.updateInputValue();\n            return;\n        }\n        console.warn('Selected time doesn\\'t match min or max value');\n    }\n\n    get value(): string {\n        return this._value;\n    }\n\n    private _value = '';\n\n    @Input() disabled: boolean;\n    @Input() disableClick: boolean;\n\n    private timepickerSubscriptions: Subscription[] = [];\n\n    onTouched = () => {\n    }\n\n    private onChange: (value: any) => void = () => {\n    }\n\n    constructor(private elementRef: ElementRef) {\n    }\n\n    private set defaultTime(time: string) {\n        this._timepicker.setDefaultTime(time);\n    }\n\n    onInput(value: string) {\n        this.value = value;\n        this.onChange(value);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.defaultTime = changes['value'].currentValue;\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        this.defaultTime = value;\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    ngOnDestroy() {\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n    }\n\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\n                this.value = time;\n                this.onChange(this._value);\n                this.onTouched();\n            }));\n            this.timepickerSubscriptions.push(\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\n        } else {\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\n        }\n    }\n\n    private updateInputValue(): void {\n        this.elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\n\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\n\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\n\n    private element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this.element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === 'string') {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { TimeFormat } from '../models/time-format.enum';\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\nimport { DateTime } from 'luxon';\n\n\nexport function getHours(format: number): ClockFaceTime[] {\n    return Array(format).fill(1).map((v, i) => {\n        const angleStep = 30;\n        const time = v + i;\n        const angle = angleStep * time;\n        return {time: time === 24 ? 0 : time, angle};\n    });\n}\n\nexport function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\n    if (config.min || config.max) {\n\n        return hours.map(value => {\n            const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\n            const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\n\n            return {\n                ...value,\n                disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n            };\n        });\n    }\n    return hours;\n}\n\nexport function getMinutes(gap = 1): ClockFaceTime[] {\n    const minutesCount = 60;\n    const angleStep = 360 / minutesCount;\n    const minutes = [];\n\n    for (let i = 0; i < minutesCount; i++) {\n        const angle = angleStep * i;\n        if (i % gap === 0) {\n            minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n        }\n    }\n    return minutes;\n}\n\nexport function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\n    if (config.min || config.max) {\n\n        const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n\n        return minutes.map(value => {\n            const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\n\n            return {\n                ...value,\n                disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n            };\n        });\n    }\n    return minutes;\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { DateTime } from 'luxon';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { getHours } from '../../utils/timepicker-time.utils';\n\n\nexport class NgxMaterialTimepickerHoursFace {\n\n    @Input() selectedHour: ClockFaceTime;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: ClockFaceTime[] = [];\n\n    protected constructor(format: number) {\n        this.hoursList = getHours(format);\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import {AfterContentInit, Component} from '@angular/core';\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { disableHours } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-24-hours-face',\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html'\n})\n\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\n\n    constructor() {\n        super(24);\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport {TimePeriod} from '../../models/time-period.enum';\nimport { disableHours } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-12-hours-face',\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html'\n})\n\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\n\n    @Input() period: TimePeriod;\n\n    constructor() {\n        super(12);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            this.hoursList = disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { DateTime } from 'luxon';\nimport { disableMinutes, getMinutes } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-minutes-face',\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\n})\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\n\n    minutesList: ClockFaceTime[] = [];\n    timeUnit = TimeUnit;\n\n    @Input() selectedMinute: ClockFaceTime;\n    @Input() selectedHour: number;\n    @Input() period: TimePeriod;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            const minutes = getMinutes(this.minutesGap);\n            this.minutesList = disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: '75px',\n        top: 'calc(50% - 75px)'\n    },\n    large: {\n        height: '103px',\n        top: 'calc(50% - 103px)'\n    }\n};\n\n@Component({\n    selector: 'ngx-material-timepicker-face',\n    templateUrl: './ngx-material-timepicker-face.component.html',\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    timeUnit = TimeUnit;\n\n    isClockFaceDisabled: boolean;\n    innerClockFaceSize = 85;\n\n    @Input() faceTime: ClockFaceTime[];\n    @Input() selectedTime: ClockFaceTime;\n    @Input() unit: TimeUnit;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\n    @Output() timeSelected = new EventEmitter<number>();\n\n    @ViewChild('clockFace') clockFace: ElementRef;\n    @ViewChild('clockHand') clockHand: ElementRef;\n\n    private isStarted: boolean;\n    private touchStartHandler: () => any;\n    private touchEndHandler: () => any;\n\n    ngAfterViewInit() {\n        this.setClockHandPosition();\n        this.addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes['faceTime'];\n        const selectedTimeChanges = changes['selectedTime'];\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this.setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this.selectAvailableTime());\n        }\n    }\n\n\n    trackByTime(_, time: ClockFaceTime): string | number {\n        return time.time;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMousedown(e: MouseEvent | TouchEvent) {\n        e.preventDefault();\n        this.isStarted = true;\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\n    @HostListener('touchend', ['$event.changedTouches[0]'])\n    @HostListener('mousemove', ['$event'])\n    selectTime(e: MouseEvent | Touch): void {\n\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === TimeUnit.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\n        const roundedAngle = isInnerClockChosen\n            ? roundAngle(circleAngle, angleStep) + 360\n            : roundAngle(circleAngle, angleStep);\n        const angle = roundedAngle === 0 ? 360 : roundedAngle;\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this.isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n    @HostListener('mouseup', ['$event'])\n    onMouseup(e: MouseEvent | TouchEvent) {\n        e.preventDefault();\n        this.isStarted = false;\n    }\n\n    isHourSelected(hour: number): boolean {\n        return (hour === this.selectedTime.time) && !this.isClockFaceDisabled;\n    }\n\n    isMinuteSelected(minute: number): boolean {\n        return ((this.selectedTime.time === minute) && (minute % (this.minutesGap || 5) === 0)) && !this.isClockFaceDisabled;\n    }\n\n    ngOnDestroy() {\n        this.removeTouchEvents();\n    }\n\n    private addTouchEvents(): void {\n        this.touchStartHandler = this.onMousedown.bind(this);\n        this.touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n\n    private removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n\n    private setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this.decreaseClockHand();\n            } else {\n                this.increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n\n    private selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n}\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    } else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    } else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    } else {// I quarter\n        return currentAngle;\n    }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-button',\n    templateUrl: './ngx-material-timepicker-button.component.html',\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\n})\nexport class NgxMaterialTimepickerButtonComponent {\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, TemplateRef } from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { DateTime } from 'luxon';\nimport { disableHours, disableMinutes, getHours, getMinutes } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial',\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\n\n    timeUnit = TimeUnit;\n\n    hours: ClockFaceTime[];\n    minutes: ClockFaceTime[];\n\n    isHintVisible: boolean;\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() hour: number | string;\n    @Input() minute: number | string;\n    @Input() format: number;\n    @Input() period: TimePeriod;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue\n            || changes['format'] && changes['format'].currentValue) {\n            const hours = getHours(this.format);\n\n            this.hours = disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (changes['period'] && changes['period'].currentValue\n            || changes['hour'] && changes['hour'].currentValue) {\n            const minutes = getMinutes(this.minutesGap);\n\n            this.minutes = disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.periodChanged.next(period);\n    }\n\n    changeHour(hour: ClockFaceTime): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: ClockFaceTime): void {\n        this.minuteChanged.next(minute);\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\n@Pipe({\n    name: 'timeFormatter'\n})\nexport class TimeFormatterPipe implements PipeTransform {\n\n    transform(time: number | string, timeUnit: TimeUnit): any {\n        if (time == null || time === '') {\n            return time;\n        }\n        switch (timeUnit) {\n            case TimeUnit.HOUR:\n                return DateTime.fromObject({hour: +time}).toFormat('HH');\n            case TimeUnit.MINUTE:\n                return DateTime.fromObject({minute: +time}).toFormat('mm');\n            default:\n                throw new Error('no such time unit');\n        }\n    }\n\n}\n","/* tslint:disable:triple-equals */\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimeFormatterPipe } from '../../pipes/time-formatter.pipe';\nimport { isDigit } from '../../utils/timepicker.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial-control',\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss']\n})\nexport class NgxMaterialTimepickerDialControlComponent implements OnChanges {\n\n    previousTime: number | string;\n\n    @Input() timeList: ClockFaceTime[];\n    @Input() timeUnit: TimeUnit;\n    @Input() time: string;\n    @Input() isActive: boolean;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\n    @Output() focused = new EventEmitter<null>();\n    @Output() unfocused = new EventEmitter<null>();\n\n    private get selectedTime(): ClockFaceTime {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['time'] && (changes['time'].currentValue !== undefined)) {\n            if (this.isEditable && !changes['time'].firstChange) {\n                return;\n            }\n            this.time = new TimeFormatterPipe().transform(+changes['time'].currentValue, this.timeUnit);\n        }\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        const time = this.selectedTime;\n        if (time) {\n            this.timeChanged.next(time);\n            this.previousTime = time.time;\n        }\n    }\n\n    formatTime(): void {\n        if (this.isEditable) {\n            const time = this.time || this.previousTime;\n            this.time = new TimeFormatterPipe().transform(+time, this.timeUnit);\n            this.unfocused.next();\n        }\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        const char = String.fromCharCode(e.keyCode);\n\n\n        if ((!isDigit(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n\n        if (isDigit(e)) {\n            this.changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    private changeTimeByArrow(keyCode: number): void {\n        const ARROW_UP = 38;\n        const ARROW_DOWN = 40;\n        let time: string;\n\n        if (keyCode === ARROW_UP) {\n            time = String(+this.time + (this.minutesGap || 1));\n        } else if (keyCode === ARROW_DOWN) {\n            time = String(+this.time - (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\nimport { DateTime } from 'luxon';\nimport { disableHours, disableMinutes } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-period',\n    templateUrl: 'ngx-material-timepicker-period.component.html',\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)'}),\n                animate('.2s', style({transform: 'scale(1)'})),\n                sequence([\n                    animate('3s', style({opacity: 1})),\n                    animate('.3s', style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMaterialTimepickerPeriodComponent {\n\n    timePeriod = TimePeriod;\n    isPeriodAvailable = true;\n\n    @Input() selectedPeriod: TimePeriod;\n    @Input() format: number;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() hours: ClockFaceTime[];\n    @Input() minutes: ClockFaceTime[];\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() selectedHour: number | string;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n\n    changePeriod(period: TimePeriod): void {\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\n        const time = this.getDisabledTimeByPeriod(period);\n        return !time.every(t => t.disabled);\n    }\n\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\n        switch (this.activeTimeUnit) {\n            case TimeUnit.HOUR:\n                return disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case TimeUnit.MINUTE:\n                return disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error('no such TimeUnit');\n        }\n    }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\n\n@Pipe({\n    name: 'styleSanitizer'\n})\nexport class StyleSanitizerPipe implements PipeTransform {\n\n    constructor(private domSanitizer: DomSanitizer) {\n    }\n\n    transform(value: string): any {\n        if (!value) {\n            return value;\n        }\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\n\n@Directive({\n    selector: '[overlay]'\n})\nexport class OverlayDirective {\n\n    @Input('overlay') preventClick: boolean;\n\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\n    }\n\n\n    @HostListener('click', ['$event'])\n    onClick(e: MouseEvent) {\n        if (!this.preventClick) {\n            this.eventService.dispatchEvent(e);\n        }\n        e.preventDefault();\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class MinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Directive({\n    selector: '[timepickerAutofocus]'\n})\nexport class AutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input('timepickerAutofocus') isFocusActive: boolean;\n\n    private activeElement: HTMLElement;\n\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this.activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this.element.nativeElement.focus());\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this.activeElement.focus());\n    }\n}\n","import { Component, forwardRef, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { getHours, getMinutes } from '../../utils/timepicker-time.utils';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { takeUntil } from 'rxjs/operators';\nimport { TimeFormatterPipe } from '../../pipes/time-formatter.pipe';\n\n@Component({\n    selector: 'ngx-timepicker-field',\n    templateUrl: './ngx-timepicker-field.component.html',\n    styleUrls: ['./ngx-timepicker-field.component.scss'],\n    providers: [\n        NgxMaterialTimepickerService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NgxTimepickerFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class NgxTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n    period$: Observable<TimePeriod>;\n\n    hour: number;\n    minute: number;\n\n    minHour = 1;\n    maxHour = 12;\n\n    timeUnit = TimeUnit;\n    timepickerTime: string;\n\n    @Input() disabled: boolean;\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\n    @Input() buttonAlign: 'right' | 'left' = 'right';\n    @Input() clockTheme: NgxMaterialTimepickerTheme;\n    @Input() controlOnly: boolean;\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        this.minHour = this._format === 12 ? 1 : 0;\n        this.maxHour = this._format === 12 ? 12 : 23;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n\n    @Input()\n    set defaultTime(val: string) {\n        this.timepickerService.setDefaultTimeIfAvailable(val, null, null, this._format);\n        this._defaultTime = val;\n        this.timepickerTime = val;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    private _defaultTime: string;\n    private _format = 12;\n\n    private hoursList: ClockFaceTime[];\n    private minutesList: ClockFaceTime[];\n\n    private unsubscribe$ = new Subject();\n\n    private onChange: (value: string) => void = () => {\n    }\n\n    constructor(private timepickerService: NgxMaterialTimepickerService) {\n    }\n\n    ngOnInit() {\n        this.period$ = this.timepickerService.selectedPeriod;\n\n        this.timepickerService.selectedHour.pipe(takeUntil(this.unsubscribe$))\n            .subscribe(hour => this.hour = hour.time);\n\n        this.timepickerService.selectedMinute.pipe(takeUntil(this.unsubscribe$))\n            .subscribe(minute => this.minute = minute.time);\n\n        this.hoursList = getHours(this._format);\n        this.minutesList = getMinutes();\n    }\n\n    writeValue(val: string): void {\n        if (val) {\n            this.defaultTime = val;\n        }\n    }\n\n    registerOnTouched(fn: any): void {\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    changeHour(hour: number): void {\n        this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\n        this.changeTime();\n    }\n\n    changeMinute(minute: number): void {\n        this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\n        this.changeTime();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.changeTime();\n    }\n\n    onTimeSet(time: string): void {\n        this.defaultTime = time;\n        this.onChange(time);\n        this.formatTime();\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe$.next();\n    }\n\n    private changeTime(): void {\n        const time = this.timepickerService.getFullTime(this._format);\n        this.timepickerTime = time;\n        this.onChange(time);\n    }\n\n    private formatTime(): void {\n        this.hour = new TimeFormatterPipe().transform(this.hour, TimeUnit.HOUR);\n        this.minute = new TimeFormatterPipe().transform(this.minute, TimeUnit.MINUTE);\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { isDigit } from '../../../utils/timepicker.utils';\nimport { TimeFormatterPipe } from '../../../pipes/time-formatter.pipe';\nimport { TimeUnit } from '../../../models/time-unit.enum';\n\n@Component({\n    selector: 'ngx-timepicker-time-control',\n    templateUrl: './ngx-timepicker-time-control.component.html',\n    styleUrls: ['./ngx-timepicker-time-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxTimepickerTimeControlComponent implements OnInit {\n\n    @Input() time: number;\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string;\n    @Input() timeUnit: TimeUnit;\n    @Input() disabled: boolean;\n\n    @Output() timeChanged = new EventEmitter<number>();\n\n    isFocused: boolean;\n\n    ngOnInit(): void {\n        this.time = new TimeFormatterPipe().transform(this.time, this.timeUnit);\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        if (!isDigit(event)) {\n            event.preventDefault();\n        }\n\n        switch (event.key) {\n            case 'ArrowUp':\n                this.increase();\n                break;\n            case 'ArrowDown':\n                this.decrease();\n                break;\n        }\n    }\n\n    increase(): void {\n        if (!this.disabled) {\n            let nextTime = +this.time + 1;\n\n            if (nextTime > this.max) {\n                nextTime = this.min;\n            }\n\n            this.timeChanged.emit(nextTime);\n        }\n    }\n\n    decrease(): void {\n        if (!this.disabled) {\n            let previousTime = +this.time - 1;\n\n            if (previousTime < this.min) {\n                previousTime = this.max;\n            }\n\n            this.timeChanged.emit(previousTime);\n        }\n    }\n\n    onInput(input: HTMLInputElement) {\n        const value = parseInt(input.value, 10);\n\n        if (!isNaN(value)) {\n            this.time = value;\n\n            if (this.time > this.max) {\n                this.time = +String(value)[0];\n            }\n\n            if (this.time < this.min) {\n                this.time = this.min;\n            }\n\n            input.value = String(this.time);\n            this.timeChanged.emit(this.time);\n        }\n\n    }\n\n    onFocus(): void {\n        this.isFocused = true;\n    }\n\n    onBlur(): void {\n        this.time = new TimeFormatterPipe().transform(this.time, this.timeUnit);\n        this.isFocused = false;\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../../models/time-period.enum';\nimport { animate, style, transition, trigger } from '@angular/animations';\n\n@Component({\n    selector: 'ngx-timepicker-period-selector',\n    templateUrl: 'ngx-timepicker-period-selector.component.html',\n    styleUrls: ['./ngx-timepicker-period-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)', opacity: 0}),\n                animate(200, style({transform: 'scale(1)', opacity: 1}))\n            ]),\n            transition(':leave', [\n                animate(200, style({transform: 'scale(0)', opacity: 0}))\n            ])\n        ])\n    ]\n})\n\nexport class NgxTimepickerPeriodSelectorComponent {\n\n    @Input() selectedPeriod: TimePeriod;\n    @Input() isOpened: boolean;\n    @Input() disabled: boolean;\n\n    @Output() periodSelected = new EventEmitter<TimePeriod>();\n\n    period = TimePeriod;\n\n    open(): void {\n        if (!this.disabled) {\n            this.isOpened = true;\n        }\n    }\n\n    select(period: TimePeriod): void {\n        this.periodSelected.next(period);\n        this.isOpened = false;\n    }\n\n    backdropClick(): void {\n        this.isOpened = false;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\nimport {\n    NgxMaterialTimepicker24HoursFaceComponent\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\nimport {\n    NgxMaterialTimepicker12HoursFaceComponent\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\nimport {\n    NgxMaterialTimepickerMinutesFaceComponent } from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\nimport {\n    NgxMaterialTimepickerDialControlComponent } from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\nimport { StyleSanitizerPipe } from './pipes/style-sanitizer.pipe';\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\nimport { OverlayDirective } from './directives/overlay.directive';\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\nimport { AutofocusDirective } from './directives/autofocus.directive';\nimport { NgxTimepickerFieldComponent } from './components/timepicker-field/ngx-timepicker-field.component';\nimport {\n    NgxTimepickerTimeControlComponent } from './components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component';\nimport {\n    NgxTimepickerPeriodSelectorComponent\n} from './components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxTimepickerFieldComponent,\n        TimepickerDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        NgxMaterialTimepickerThemeDirective\n    ],\n    declarations: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxMaterialTimepickerButtonComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent,\n        NgxMaterialTimepickerPeriodComponent,\n        StyleSanitizerPipe,\n        TimeFormatterPipe,\n        TimepickerDirective,\n        OverlayDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        AutofocusDirective,\n        MinutesFormatterPipe,\n        NgxMaterialTimepickerThemeDirective,\n        NgxTimepickerFieldComponent,\n        NgxTimepickerTimeControlComponent,\n        NgxTimepickerPeriodSelectorComponent\n    ]\n})\nexport class NgxMaterialTimepickerModule {\n}\n"]}